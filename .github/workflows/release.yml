name: Release
on:
  push:
    tags:
      - v*
jobs:
  setup_release:
    name: Setup release
    runs-on: ubuntu-latest
    steps:
    - name: Create release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Get url to upload to release from output
      env:
        url: ${{ steps.create_release.outputs.upload_url }}
      run: |
        mkdir artifact
        echo $url > artifact/url.txt

    - name: Upload artifact to share url with other jobs
      uses: actions/upload-artifact@v1
      with:
        name: artifact
        path: artifact/url.txt

  release:
    name: Release
    needs: setup_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [mac64, lin64, win64]
        include:
        - os: mac64
          goos: darwin
          arch: amd64
        - os: lin64
          goos: linux
          arch: amd64
        - os: win64
          goos: windows
          arch: amd64
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13

    - name: Check out code
      uses: actions/checkout@v1
      with:
        submodules: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Move bosh-cli submodule to GOPATH/src
      run: |
        mkdir -p $(go env GOPATH)/src/github.com/cloudfoundry
        mv $GITHUB_WORKSPACE/bosh-cli $(go env GOPATH)/src/github.com/cloudfoundry/

    - name: Add patch
      env:
        goos: ${{ matrix.goos }}
        goarch: ${{ matrix.arch }}
      run: |
        cd $(go env GOPATH)/src/github.com/cloudfoundry/bosh-cli
        patch -l -p1  < $GITHUB_WORKSPACE/patch.txt
        mkdir -p /tmp/dist
        GOOS=$goos GOARCH=$goarch go build -v -o /tmp/dist/app $(go env GOPATH)/src/github.com/cloudfoundry/bosh-cli
        zip -j -r /tmp/release.zip /tmp/dist

    - name: Download artifact to get url to upload to release
      uses: actions/download-artifact@v1
      with:
        name: artifact

    - name: Get url to upload to release from artifact
      id: get_url
      run: |
        url=$(cat artifact/url.txt)
        echo "##[set-output name=upload_url;]$url"

    - name: Upload release asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: /tmp/release.zip
        asset_name: release-${{ matrix.os }}.zip
        asset_content_type: application/zip
